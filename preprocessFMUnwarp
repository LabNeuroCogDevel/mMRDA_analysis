#!/usr/bin/env bash

#This is the worker script for gre fieldmap unwarping

# FM = space of fieldmap
# EF = space of example_func
# UD = undistorted (in any space)
# D  = distorted (in any space)

# savetemps deprecated: cleanup handled in preprocessFunctional
# Whether to save temporary fieldmap files (for debugging)
# [ -z "$savetemps" ] && savetemps=no #=yes, save

# Whether to take sequential pictures of processing steps
[ -z "$pics" ] && pics=no #=yes, take

# Make an unwarp temps working directory
tempsdir=$(pwd)/unwarptemps
[ -d $tempsdir ] && rm -r $tempsdir
mkdir $tempsdir

imgdir=$(pwd)/img
[ -d $imgdir ] && rm -r $imgdir

#function for taking sequential processing pictures
globalcount=0
function _picture {
   # only do this if we are told to
   [ "$pics" == "yes" ] || return 0

   # check we have a save directory
   [ -d $imgdir ] || mkdir $imgdir 

   globalcount=$((( $globalcount+ 1))) #let ..++ can return 0 and break things with set -e 

   name=$(basename $(basename $1 .gz) .nii)
   num=$(printf "%04d" $globalcount)
   imgname=$imgdir/${num}_$name.png
   slicer -u $1 -a $imgname
   convert -scale 200% -fill white -gravity southwest -annotate 0 "$num $name:  $2" $imgname $imgname
}

#rel is shorthand for "run, echo, log"
[ -z "$logFile" ] && logFile=unwarp.log
touch $logFile # get abs path later, make sure it exists now
function rel() {
    #function that runs, echos to terminal, and logs to file an arbitrary command
    cmd="${1}"
    comment=0
    [[ -n "${2}" && ${2} = c ]] && comment=1
    
    #echo to screen
    echo ${cmd}

    #run command   
    [ $comment -eq 0 ] && eval ${cmd}
    
    if [ -n "${logFile}" ]; then
       [ $comment -eq 1 ] && cmd="## ${cmd}"
       echo "${cmd}" >> "${logFile}"
    fi
}

# Process command line inputs
while [ $# -gt 0 ];do
 case $1 in
   -p|--field    ) grefieldmap="$2" ;      shift;; # raw phase fieldmap image (get field distortion)
   -m|--mag      ) gremagnitude="$2" ;     shift;; # magnitude fieldmap image (whole head) (align field distortion)
   -c|--config   ) configfile="$2";        shift;; # configuration file        (scanner, TEdiff, dwell time)
   -f|--preMC) preMC="$2";                 shift;; # functional file before motion correction (want to unwarp + motion correct)
   --mcMats) mcMats="$2";                  shift;; # directory to motion correction affine matrices from mcflirt -mats
   #### The rest should be in a config, config overrides anything here
   --tediff   ) TEdiff="$2" ;           shift;;
   --scanner  ) scanner="$2" ;          shift;;
   --te       ) epiTE="$2" ;            shift;;
   --dwell    ) dwelltime="$2" ;         shift;;
   --direction) unwarpdir="$2" ;        shift;;
   --loss     ) signallossthresh="$2" ; shift;;
   (--) shift; break;;
   (-*) echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
   (*) break;;
 esac
 shift
done

# Allow --config to be a shorthand lookup, defined here, rather than a config file
case $configfile in
 cogemo|multimodal|wpc5640 ) configfile=$(dirname $0)/MultiModalScan.cfg;;
esac

# source config file or warn
[ -n "$configfile" -a -r "$configfile" ] && source $configfile || echo "WARNING: readable config file not provided or understood ($configfile)"

# check all inputs exist
for inputName in preMC mcMats grefieldmap gremagnitude epiTE dwelltime unwarpdir TEdiff signallossthresh scanner; do
 #evaluate each argument in list above and check that it is defined
 inputVal=${!inputName}
 [ -z "${inputVal}" ] && echo "$inputName cannot be empty" && exit 1
done

# check needed files exist
for fileVar in grefieldmap gremagnitude logFile; do   # no longer care about functional
 filePath=${!fileVar} # path is the value of the variables we are iterating through
 [ ! -r "${filePath}" -a ! -r "${filePath}.nii"  -a ! -r "${filePath}.nii.gz"  ] && echo "$fileVar ($filePath[.nii[.gz]]) DNE" && exit 1

 # make paths absolute
 cd $(dirname $filePath) 
 filePath=$(pwd)/$(basename $filePath) 

 # place absolute path back into the file variable name
 printf -v $fileVar "$filePath" # eg functional=".../functional.nii.gz"
 # jump back to the directory we were in before setting abs path
 cd - 1>/dev/null
done

# make storage directories
[ -d unwarp ] && rm -r unwarp

set -e


### Field Warp

## setup
rel "copying to FSL namespace images" c
mkdir unwarp && cd $_
#rel "mkdir unwarp && cd $_"
rel "fslmaths ../example_func    EF_D_example_func"
rel "fslmaths $gremagnitude      FM_UD_fmap_mag"
rel "bet FM_UD_fmap_mag          FM_UD_fmap_mag_brain -R"


# Convert fieldmap to rad/s
rel "fieldmapToRS $grefieldmap"   # FM_UD_fmap                 

####ALTERNATIVE TO USE FSL_PREPARE_FIELDMAP
# this does rad/s plus smoothing, etc.
# use fsl_prepare_fieldmap to create a rad/s ver. of the fieldmap
# scanner and TEdiff should be in the cfg
#Usage: fsl_prepare_fieldmap <scanner> <phase_image> <magnitude_image> <out_image> <deltaTE (in ms)> [--nocheck]"
#eg:    fsl_prepare_fieldmap SIEMENS images_3_gre_field_mapping images_4_gre_field_mapping fmap_rads
#fsl_prepare_fieldmap $scanner $grefieldmap FM_UD_fmap_mag FM_UD_fmap $TEdiff ## creates FM_UD_fmap
# if any of these vars are undefined, fsl_prepare_fieldmap will print usage with error exit status
# and set -e of master will grab it and die

globalcount=-1
_picture EF_D_example_func    "Initial"; globalcount=-1
_picture FM_UD_fmap           "Initial"; globalcount=-1 
_picture FM_UD_fmap_mag       "Initial"; globalcount=-1
_picture FM_UD_fmap_mag_brain "Initial (copy of FM mag)"; 

# creates EF_D_example_func.nii  FM_UD_fmap_mag.nii   FM_UD_fmap.nii        

rel "Creating masks" c
## Mask

# Create a binary mask of the non-zero voxels of the fieldmap magnitude image (which was skull-stripped above)
rel "fslmaths FM_UD_fmap_mag_brain -bin FM_UD_fmap_mag_brain_mask -odt short"

#fslmaths FM_UD_fmap_mag_brain_mask FM_UD_fmap_mag_brain_mask_origBAK
# invert and cluster outside to patch holes

# abs the original fieldmap, binarize, then mask based on the 1/0 magnitude image, invert by *-1, + 1, binarize (to be safe).
# The result, FM_UD_fmap_mag_brain_mask_inv, is the non-zero voxels of the *fieldmap* (not magnitude) inverted such that
# brain-ish voxels are 0 and non-brain voxels are 1.
# This may lead to a circumstance where there are brain voxels of interest that have value 0 in the fieldmap. (patchy holes)
rel "fslmaths FM_UD_fmap -abs -bin -mas FM_UD_fmap_mag_brain_mask -mul -1 -add 1 -bin FM_UD_fmap_mag_brain_mask_inv"

_picture FM_UD_fmap_mag_brain_mask "binary mask of skullstriped fmap_mag "
_picture FM_UD_fmap_mag_brain_mask_inv "non brain regions"

# To handle the above scenario of 0-valued voxels in fieldmap, use cluster to obtain the largest cluster of non-zero
# (non-brain) voxels in the above mask. The output of cluster is an integer-valued image with masks for each spatial cluster
rel "cluster -i FM_UD_fmap_mag_brain_mask_inv -t 0.5 --no_table -o FM_UD_fmap_mag_brain_mask_idx"

# This will grab the largest spatial cluster (the max of the range, -R), which refers to the biggest non-brain cluster
outsideIdx=$(fslstats FM_UD_fmap_mag_brain_mask_idx -R | awk '{print  $2}')

# Now take the clusters image, zero everything below the max (where max contains the biggest non-brain cluster),
# binarize the image, re-invert (*-1 + 1), binarize again, then mask by the skull-stripped magnitude image.
# Overwrite the fieldmap magnitude brain mask with the result, which reflects the largest non-zero cluster
rel "fslmaths FM_UD_fmap_mag_brain_mask_idx -thr $outsideIdx -bin -mul -1 -add 1 -bin -mas FM_UD_fmap_mag_brain_mask FM_UD_fmap_mag_brain_mask"

_picture FM_UD_fmap_mag_brain_mask_inv "non brain regions, clustered"
_picture FM_UD_fmap_mag_brain_mask "new brain_mask (inverted biggest nonbrain region masked by old self)"

#fslmaths FM_UD_fmap_mag_brain_mask FM_UD_fmap_mag_brain_mask_afterInvBAK

### Refine Mask

rel "refining masks" c
## De-median the fieldmap
# compute median of non-zero voxels in fieldmap, masking by the useful voxels (from mask steps above)
medVal=$(fslstats FM_UD_fmap -k FM_UD_fmap_mag_brain_mask -P 50 | sed 's/ //g') # 112.242508

# subtract off the median from all fieldmap voxels within the relevant mask, then overwrite fmap
rel "fslmaths FM_UD_fmap -sub $medVal -mas FM_UD_fmap_mag_brain_mask FM_UD_fmap"

# From skull-stripped magnitude image, compute 98th pctile of nonzero voxels, divide by 2
almostHalfMax=$(fslstats FM_UD_fmap_mag_brain -P 98 | awk '{print $1/2}') # 563.5

# refine mask (remove edge voxels where signal is poor)
# Zero all non-zero voxels in the skull-stripped magnitude image that fall below half of 98th pctile
# Many will be near the edge
rel "fslmaths FM_UD_fmap_mag_brain -thr $almostHalfMax -bin FM_UD_fmap_mag_brain_mask50"

# Erode once to shave off a layer of all edges
rel "fslmaths FM_UD_fmap_mag_brain_mask -ero FM_UD_fmap_mag_brain_mask_ero"

# Take the eroded magnitude mask and add back those voxels (wherever they are) that exceed the half-max (~50th pctile)
# Then threshold those < 1 and binarize to make a magnitude mask.
# In effect, this will bring back edge voxels lost by -ero that are > median (i.e., they have adequate signal and should be retained)
rel "fslmaths FM_UD_fmap_mag_brain_mask_ero -add FM_UD_fmap_mag_brain_mask50 -thr 0.5 -bin FM_UD_fmap_mag_brain_mask"

# Remove poor-quality edge voxels from the fieldmap using the the magnitude mask above (that dropped voxels < half max)
rel "fslmaths FM_UD_fmap -mas FM_UD_fmap_mag_brain_mask FM_UD_fmap"

# snap shots
_picture FM_UD_fmap                    "overwrite by demedian-ing ( - $medVal, overwrite)"
_picture FM_UD_fmap_mag_brain_mask50   "mag (masked) >$almostHalfMax (all high intensity)"
_picture FM_UD_fmap_mag_brain_mask_ero "mag (masked) eroded"
_picture FM_UD_fmap_mag_brain_mask     "eroded + high intensity (overwrite)"
_picture FM_UD_fmap                    "remove low intenity (mask by brain_mask finally) (overwrite)"

# [ -n "$savetemps" ] && fslmaths FM_UD_fmap FM_UD_fmap_preMedianFilter

## Despike just edges
# Erode the magnitude mask created above
rel "fslmaths FM_UD_fmap_mag_brain_mask -ero FM_UD_fmap_mag_brain_mask_ero"

#Apply apply 2D despiking filter, masking within the magnitude mask
rel "fugue --loadfmap=FM_UD_fmap --savefmap=FM_UD_fmap_tmp_fmapfilt --mask=FM_UD_fmap_mag_brain_mask --despike --despikethreshold=2.1"

#Smooth/despike voxels at the edge of the brain, leave everything else alone
#How: take the unsmoothed fieldmap, which is masked by magnitude,
#1) subtract despiked fieldmap (which is smoother) (-sub)
#2) zero all voxels outside of the eroded magnitude mask (-mas)
#3) add back despiked fieldmap -- this does 2 things:
#      - retains original fmap within ero mask (since the -add and -sub sum to 0)
#      - add despiked fmap outside of ero mask (where the -mas reset these voxels to 0)

rel "fslmaths FM_UD_fmap -sub FM_UD_fmap_tmp_fmapfilt -mas FM_UD_fmap_mag_brain_mask_ero -add FM_UD_fmap_tmp_fmapfilt FM_UD_fmap"

# snap shots
_picture FM_UD_fmap_mag_brain_mask_ero "erode brain_mask again (regardless of intensity)"
_picture FM_UD_fmap_tmp_fmapfilt       "2D demeaned,despiked FM"
_picture FM_UD_fmap                    "sub self from demeaned, apply ero. mask, add back (overwrite)"

#clean up
mv  FM_UD_fmap_tmp_fmapfilt* FM_UD_fmap_mag_brain_mask_ero* FM_UD_fmap_mag_brain_mask50* FM_UD_fmap_mag_brain_mask_i* $tempsdir

##########
rel "Compute signal loss estimates" c

## de-median field map (again)
medVal=$(fslstats FM_UD_fmap -k FM_UD_fmap_mag_brain_mask -P 50 | sed 's/ //g' ) # -0.623573

rel "fslmaths FM_UD_fmap -sub $medVal -mas FM_UD_fmap_mag_brain_mask FM_UD_fmap"

_picture FM_UD_fmap "demedian and mask ($medVal, again?, overwrite)"

########## fmap+mag.png
rel "Composing image of fieldmap and magnitude: fmap_mag.png" c
# make lowest value 10 - prepare for thumbnail
minVal=$(fslstats FM_UD_fmap -R | awk '{ print  $1}') #  -1383.077148 

rel "fslmaths FM_UD_fmap -sub $minVal -add 10 -mas FM_UD_fmap_mag_brain_mask grot"

_picture grot "FM_UD_fmap - $minVal + 10 (prepare for thumbnail)"

# Determine the range of values above 1
rangeAboveOne=$( fslstats grot -l 1 -p 0.1 -p 95 ) # 607.379578 1602.596313

rel "overlay 0 0 FM_UD_fmap_mag -a grot $rangeAboveOne fmap+mag"

# Generate slice images
rel "slicer fmap+mag -s 3 -x 0.35 sla.png -x 0.45 slb.png -x 0.55 slc.png -x 0.65 sld.png -y 0.35 sle.png -y 0.45 slf.png -y 0.55 slg.png -y 0.65 slh.png -z 0.35 sli.png -z 0.45 slj.png -z 0.55 slk.png -z 0.65 sll.png"

#pull these together
rel "pngappend sla.png + slb.png + slc.png + sld.png + sle.png + slf.png + slg.png + slh.png + sli.png + slj.png + slk.png + sll.png fmap+mag.png"
# cleanup 
rel "rm sl[a-l].png"
##########################


### Warp fieldmap to EPI (middle volume) and back
rel "signal loss and initial warp" c

# get a sigloss estimate and make (-s) a siglossed estimate for forward warp
# to be Distorted (ref (after *mag) and refweight in EF_2_FM warp) and warped to epi (sigloss+*png)
rel "sigloss -i FM_UD_fmap --te=$epiTE -m FM_UD_fmap_mag_brain_mask -s FM_UD_fmap_sigloss"

# make ref of sigloss by mulitplying by mag for EF2FM
rel "fslmaths FM_UD_fmap_sigloss -mul FM_UD_fmap_mag_brain FM_UD_fmap_mag_brain_siglossed -odt float"

_picture FM_UD_fmap_sigloss "FM_UD_fmap masked sigloss (te=$epiTE)"
_picture FM_UD_fmap_mag_brain_siglossed "multiply sigloss by mag brain"

rel "forward warp siglosses fieldmaps (UnDistorted to Distorted) " c

####CHECKED MATCH TO FEAT 6.0 UP TO HERE! 3/10/2014
##TODO: Make sure that orientation of EPI and FM images match!
#rel "3dresample -overwrite -orient LPI -prefix \"functional.nii.gz\" -inset \"functional.nii.gz\""

# Distort mag_brain_siglossed and fmap_sigloss by forward warp with FM_UD_warp
# make a warped version of FM_UD_fmap_mag to match with the EPI (for sigloss png)
# -w is forward warp applied to
for file in FM_UD_fmap_mag_brain_siglossed FM_UD_fmap_sigloss; do
  rel "fugue -i  $file \
        --loadfmap=FM_UD_fmap --mask=FM_UD_fmap_mag_brain_mask --dwell=$dwelltime \
        -w ${file/_UD_/_D_} --nokspace --unwarpdir=$unwarpdir"

   _picture ${file/_UD_/_D_} "undistorted to distorted ($unwarpdir), forward warp via FM_UD_fmap"

   # creates FM_D_fmap_mag_brain_siglossed FM_D_fmap_sigloss
done

###################
rel "applying warp (EPI2FM, then FM2EPI) undistorted fieldmaps warped into epi space" c

# threshold by value set in cfg
#The goal of thresholding based on signal loss is to remove EPI voxels where the signal loss
#is greater than 90%, so there is little useful signal there, and what is there may
#be highly distorted, which could detract from coregistration.
rel "fslmaths FM_D_fmap_sigloss -thr $signallossthresh FM_D_fmap_sigloss" # .9
_picture FM_D_fmap_sigloss "threshold by $signallossthresh (overwrite)"

# align middle epi (is distorted) to mag fieldmap (with distortion applied)
#    overwrite grot (now totally different, will be used for thumbnail again)
# use distorted singloss as a reference weight
# Example Functional is distorted and has falloff in high sigloss areas (darkening)
# FM magnitude siglossed has been distorted and darkened similarly to improve coregistration
# In addition, weight the "good" voxels (low sigloss) more in the registration cost function
rel "flirt -in EF_D_example_func -ref FM_D_fmap_mag_brain_siglossed -omat EF_2_FM.mat -o grot -dof 6 -refweight FM_D_fmap_sigloss"
_picture grot "align FM (mag,sigloss in) to epi (ref) (make EF2FM.mat, use this image for thumbnail)"

# reverse  EF->FM  to get FM->EF (to put all fieldmap stuff in epi space)
rel "convert_xfm -omat FM_2_EF.mat -inverse EF_2_FM.mat"

# warp all the fieldmap images into EPI,  FM_UDs become EF_UDs
for file in "FM_UD_fmap" "FM_UD_fmap_mag_brain" "FM_UD_fmap_mag_brain_mask" "FM_UD_fmap_sigloss"; do
  rel "flirt -in $file  -ref EF_D_example_func -init FM_2_EF.mat -applyxfm -out ${file/FM_/EF_} "
  #creates "EF_UD_fmap" "EF_UD_fmap_mag_brain" "EF_UD_fmap_mag_brain_mask" "EF_UD_fmap_sigloss"
  _picture ${file/FM_/EF_}  "align FM (mag,sigloss in) to epi (ref) (make EF2FM.mat)"
done

## sigloss IMAGE ##################
rel "composing EF_UD_sigloss+mag.png" c
# threshold
# now that we've warped EF_UDs to EF_D_, we can threshold the old stuff for image making
rel "fslmaths EF_UD_fmap_mag_brain_mask -thr 0.5 -bin EF_UD_fmap_mag_brain_mask -odt float"
rel "fslmaths EF_UD_fmap_sigloss -thr $signallossthresh EF_UD_fmap_sigloss -odt float"

# create an overlay for visualization
rel "overlay 1 0 EF_UD_fmap_mag_brain -a EF_UD_fmap_sigloss 0 1 grot"
# and make the image
rel "slicer grot -s 3 -x 0.35 sla.png -x 0.45 slb.png -x 0.55 slc.png -x 0.65 sld.png -y 0.35 sle.png -y 0.45 slf.png -y 0.55 slg.png -y 0.65 slh.png -z 0.35 sli.png -z 0.45 slj.png -z 0.55 slk.png -z 0.65 sll.png"
rel "pngappend sla.png + slb.png + slc.png + sld.png + sle.png + slf.png + slg.png + slh.png + sli.png + slj.png + slk.png + sll.png EF_UD_sigloss+mag.png"

# clean up
rm sl[a-l].png
############

rel "Unwarp example func (undistort, shift)" c
# epi: D -> UD
# shift -> example_func -> applywarp final 4D
# unwarp EF_D_example_func to EF_UD_example_func (for thumbnail, compare to original, and in convertwarp to build applywarp)
# and save unwarp-shiftmap then convert to unwarp-warpfield
# -u is unwarp 
rel "fugue --loadfmap=EF_UD_fmap --dwell=$dwelltime --mask=EF_UD_fmap_mag_brain_mask -i EF_D_example_func -u EF_UD_example_func --unwarpdir=$unwarpdir --saveshift=EF_UD_shift"
_picture EF_UD_shift "pixelshift ($unwarpdir)  EF_D_example using EF_UD_fmap"

# warp with shift map from above (undistored, shifted epi) and original epi example
# this will be used in the finally apply warp
rel "convertwarp -s EF_UD_shift -o EF_UD_warp -r EF_D_example_func --shiftdir=$unwarpdir"
_picture EF_UD_warp "warped ($unwarpdir, shift w/undistored, shifted epi (with orig distored epi as ref)"

################################################

## shift image thumbnail
rel "composing EF_UD_shift+mag.png" c
# hack to to get variables (bash array of results from fslmatsh|awk)
shiftExtrema=( $(fslstats EF_UD_shift -R -P 1 -P 99 | awk '{printf "%.1f %.1f %f %f", $1, $2, $3*-1, $4}'))
#-9.9, 8.0, 3.999190, 4.090690
shiftminR=${shiftExtrema[0]} # not used by image
shiftmaxR=${shiftExtrema[1]} # not used by image
shiftminr=${shiftExtrema[2]}
shiftmaxr=${shiftExtrema[3]}

# save inverse to grot (so image can do something?)
rel "fslmaths EF_UD_shift -mul -1 grot"
rel "overlay 1 0 EF_UD_fmap_mag_brain -a EF_UD_shift 0.0001 $shiftmaxr grot 0.0001 $shiftminr grot"
rel "slicer grot -s 3 -x 0.35 sla.png -x 0.45 slb.png -x 0.55 slc.png -x 0.65 sld.png -y 0.35 sle.png -y 0.45 slf.png -y 0.55 slg.png -y 0.65 slh.png -z 0.35 sli.png -z 0.45 slj.png -z 0.55 slk.png -z 0.65 sll.png"
rel "pngappend sla.png + slb.png + slc.png + sld.png + sle.png + slf.png + slg.png + slh.png + sli.png + slj.png + slk.png + sll.png EF_UD_shift+mag.png"

# clean up
rm sl[a-l].png

## Skipping EF_D_example_func.gif EF_UD_example_func.gif EF_UD_fmap_mag_brain.gif
## for files in ^; do slicer &&  pngappend; done;  whirlgif

### 4D DATA!!
rel "Unwarping all EPI" c

# apply warping and motion correction to example_func and 4D data
# why immv and not fslmaths? I don't know
cd - 1>/dev/null # back to subj data

# copy the example func to a more verbose name (original distorted)
# so we can name the warped version example_func
rel "immv example_func example_func_orig_distorted"
# warp using the already warped and undistored epi
rel "applywarp -i example_func_orig_distorted -o example_func -w unwarp/EF_UD_warp -r example_func_orig_distorted --abs --mask=unwarp/EF_UD_fmap_mag_brain_mask --interp=spline"

# FSL tcl script ($FSLDIR/tcl/featlib.tcl) would just apply warp to 4d funcdata if mcflirt transforms DNE
# but they do for us, so unwarp on volume at a time
# split the funcdata into junk name grot
[ -d grot ] && rm -r grot
mkdir grot
fslsplit $preMC grot/grot

# get the total number of volumes in the functional
totalVolumes=$(fslhd $preMC|perl -lne 'print $1 if m/^dim4\s+(\d+)$/') # 182
# for each split, apply warp 
# count is 0 based, fslhd output was not, subtract 1 from total

for i in $(seq 0 $((($totalVolumes-1))) ); do
 pad=$(printf "%04d" $i)

###PREMAT DIR MAY NEED TO BE SPECIFIED

 rel "applywarp -i grot/grot$pad -o grot/grot$pad \
           --premat=$mcMats/MAT_$pad \
           -w unwarp/EF_UD_warp -r example_func --abs \
           --mask=unwarp/EF_UD_fmap_mag_brain_mask --interp=spline"
done
rel "fslmerge -t prefiltered_func_data_unwarp grot/*"
_picture  prefiltered_func_data_unwarp "FINAL! "

# clean up
rm -r grot/
mv mc/           $tempsdir
mv unwarp/*nii*  $tempsdir
mv unwarp/*mat   $tempsdir
mv example_func* $tempsdir #example_func.nii* example_func_orig_distorted.nii*
#keep $preMC.nii* 
[ -d unwarp_thumbnails ] && rm -r unwarp_thumbnails
mv unwarp unwarp_thumbnails

## fsl does slice time correction next (line 5194 of featlib.tcl, 581 if log.commented)



######
#LEFTOVERS
#
#
# this takes forever, just use preMC
#rel "fslmaths $functional $preMC -odt float # copy to FSL friendly name"
#
## motion correct (mat here used as premat in applywarp)
# only doen if we don't have correction from preprocessFunctional passed in
#if [ -z "$preMC" ] || [ ! -r "$preMC" -a ! -r "$preMC.nii" -a ! -r "$preMC.nii.gz" ]; then
# echo "could not find motion corrected functional image!"
# exit 1 
 #### Below is no longer executed"
 #rel "WARNING: motion correction to middle volume (need MAT) -- this shouldn't need to be done" c
 #midvol=$(fslhd $preMC|perl -lne 'print  int($1/2) if m/^dim4\s+(\d+)$/') # 91
 #fslroi $preMC example_func $midvol 1
 #preMC="prefiltered_func_data_mcf"
 #mcflirt -in $preMC -out $preMC -mats -plots -refvol $midvol -rmsrel -rmsabs
 #[ -d mc ] && rm -r mc
 #mkdir mc && mv *rms *par *mat/ mc
#fi





### setup
#rootdir=/Volumes/T800/CogEMOSounds/subjs
#subj=10892
#run=run1
#functional=${rootdir}/$subj/$run/functional.nii.gz
#grefieldmap=${rootdir}/$subj/grefieldmap2/grefieldmap2.nii
#gremagnitude=${rootdir}/$subj/grefieldmap1/magnitude2.nii.gz
###
#epiTE=.002 # [ep2d_bold routine]
#TEdiff=0.00246 #diff in TEs, from scan sheet #difference in phase of two maginutde images # should be ?? 0.000425 
#dwelltime=0.000425 # ep2d_bold (echo spacing [Sequence])/(Accel. factor PE [Resolution]) e.g. GogEMO .85ms/2 * 1s/1000ms
#signallossthresh=0.9 # as was observed in log output
#unwarpdir="x-" # "play with this"
#signallossthresh=0.9 # as was observed in log output


# check fieldmap is what we think it is (slope and intercept of a fieldmap)
## NOW DONE IN CFG file
#fslhd ${grefieldmap} |
#  perl -lne 'our $intercept= int($1) if m/^scl_inter\s+(-[\d.]+)/;
#             our $slope    = int($1) if m/^scl_slope\s+(\d+)/;
#            END { unless( $intercept == -4096 && $slope == 2){
#                    print "Fieldmap intercept ($intercept) and slope ($slope) fields do not match expected values",
#                     " of -4096 and 2, respectively.\n  Cannot determine conversion to rad/s.",
#                     " Exiting script.";
#                     exit 1
#                  } 
#            }' || exit 1
#     
